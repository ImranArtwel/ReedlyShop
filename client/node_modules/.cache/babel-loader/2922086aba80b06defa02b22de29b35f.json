{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nvar instances = [];\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n/**\n * The default log level\n */\n\n\nvar defaultLogLevel = LogLevel.INFO;\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\n\nvar defaultLogHandler = function (instance, logType) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  var now = new Date().toISOString();\n\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\n      break;\n\n    case LogLevel.VERBOSE:\n      console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\n      break;\n\n    case LogLevel.INFO:\n      console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\n      break;\n\n    case LogLevel.WARN:\n      console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\n      break;\n\n    case LogLevel.ERROR:\n      console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\n      break;\n\n    default:\n      throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\n  }\n};\n\nvar Logger =\n/** @class */\nfunction () {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  function Logger(name) {\n    this.name = name;\n    /**\n     * The log level of the given Logger instance.\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\n     * The log handler for the Logger instance.\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\n     * Capture the current instance for later use\n     */\n\n    instances.push(this);\n  }\n\n  Object.defineProperty(Logger.prototype, \"logLevel\", {\n    get: function () {\n      return this._logLevel;\n    },\n    set: function (val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError('Invalid value assigned to `logLevel`');\n      }\n\n      this._logLevel = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Logger.prototype, \"logHandler\", {\n    get: function () {\n      return this._logHandler;\n    },\n    set: function (val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n\n      this._logHandler = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  Logger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n  };\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n  };\n\n  Logger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\n  };\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\n  };\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n  };\n\n  return Logger;\n}();\n/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.logLevel = level;\n  });\n}\n\nexport { LogLevel, Logger, setLogLevel };","map":{"version":3,"sources":["../src/logger.ts","../index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.VERBOSE:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.INFO:\n      console.info(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.WARN:\n      console.warn(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.ERROR:\n      console.error(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    default:\n      throw new Error(\n        `Attempted to log a message with an invalid logType (value: ${logType})`\n      );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError('Invalid value assigned to `logLevel`');\n    }\n    this._logLevel = val;\n  }\n\n  /**\n   * The log handler for the Logger instance.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { instances, LogLevel } from './src/logger';\n\nexport function setLogLevel(level: LogLevel): void {\n  instances.forEach(inst => {\n    inst.logLevel = level;\n  });\n}\n\nexport { Logger, LogLevel, LogHandler } from './src/logger';\n"]},"metadata":{},"sourceType":"module"}